name: Integration and deployment

on:
  push:
    branches: [ "trunk" ]
  pull_request:
    branches: [ "trunk" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GITHUB_TOKEN: ${{ github.token }}
  ARTIFACTS: packages
  # WIN_BOOST_ROOT: ${{github.workspace}}\boost_1_81_0

jobs:
  linux-integration:

    if: false

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'

    - name: Install project pre-requisites
      # install Ninja 'cause of the automatic build parallelism tuned with the
      # number of processors found in the hosting system
      run: |
        sudo apt update
        sudo apt upgrade -y
        sudo apt install -y default-jdk libboost-all-dev lintian ninja-build

    - name: CMake configuration
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -GNinja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DODOX_TESTS=ON

    - name: Build executables
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Performs tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Create platform dependent binary packages
      working-directory: ${{github.workspace}}/build
      run: cpack

    - name: Upload produced artifacts
      uses: actions/upload-artifact@v3
      id: upload-artifacts
      with:
        name: ${{env.ARTIFACTS}}
        path: ${{github.workspace}}/build/*.deb

  macos-integration:

    if: false

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'

    - name: Install project pre-requisites
      # install Ninja 'cause of the automatic build parallelism tuned with the
      # number of processors found in the hosting system
      run: brew install boost ninja

    # antlr-4.12.0-complete.jar is compiled with a bytecode v55.
    # according to [Class File Versions](https://javaalmanac.io/bytecode/versions/)
    # this correspond to a java v11 that we require because the default provided
    # is java 8 (so bytecode v52)
    - name: Install correct Java version
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        check-latest: true

    - name: CMake configuration
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -GNinja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DODOX_TESTS=ON

    - name: Build executables
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Performs tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Create platform dependent binary packages
      working-directory: ${{github.workspace}}/build
      run: cpack

    - name: Upload produced artifacts
      uses: actions/upload-artifact@v3
      id: upload-artifacts
      with:
        name: ${{env.ARTIFACTS}}
        path: ${{github.workspace}}/build/*.pkg

  windows-integration:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:

    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          base-devel
          mingw-w64-x86_64-boost
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-toolchain

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'

    # - name: Boost installer download from SourceForge and execution
    #   working-directory: ${{github.workspace}}
    #   shell: cmd
    #   run: |
    #     powershell -c "(New-Object Net.WebClient).DownloadFile('https://sourceforge.net/projects/boost/files/boost-binaries/1.81.0/boost_1_81_0-msvc-14.3-64.exe', 'boost_1_81_0-msvc-14.3-64.exe')"
    #     dir
    #     start "Installer" /wait boost_1_81_0-msvc-14.3-64.exe /SILENT

    # - name: Download and extract boost libraries
    #   uses: gamedev-thingy/Download-Extract@v2
    #   with:
    #     url: "https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.zip"
    #     destination: ${{github.workspace}}
    #     ZIPname: boost_1_81_0

    # antlr-4.12.0-complete.jar is compiled with a bytecode v55.
    # according to [Class File Versions](https://javaalmanac.io/bytecode/versions/)
    # this correspond to a java v11 that we require because the default provided
    # is java 8 (so bytecode v52)
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        check-latest: true

    - name: Configure CMake
      shell: msys2 {0}
      run: cmake -GNinja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DODOX_TESTS=ON

    # - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -GNinja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DODOX_TESTS=ON
      # -DBOOST_ROOT=/msys64/mingw64 -DBoost_INCLUDE_DIR=/msys64/mingw64/include
      # -DBOOST_ROOT=${{env.WIN_BOOST_ROOT}}

    - name: Build
      shell: msys2 {0}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      shell: msys2 {0}
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    # creates binary package
    - name: Create package
      shell: msys2 {0}
      working-directory: ${{github.workspace}}/build
      run: cpack

    # upload artifacts
    - uses: actions/upload-artifact@v3
      with:
        name: artifacts-${{steps.git_tag.outputs.tag}}
        path: ${{github.workspace}}/build/*.exe

  deployment:
    needs: [linux-integration, macos-integration, windows-integration]
    runs-on: ubuntu-latest

    steps:

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'

    - name: Get the latest tag in repo
      # result in steps.git_tag.outputs.tag
      id: git_tag
      uses: pavelsaman/git-nth-last-tag@v1

    - name: Get the release associated with the found tag
      id: latest_release
      uses: kaliber5/action-get-release@v1
      with:
        tag_name: ${{steps.git_tag.outputs.tag}}
        token: ${{ env.GITHUB_TOKEN }}
        # latest: true

    - name: Download artifacts locally
      # setting no name will download all the produced artifacts in the
      # workspace after creating a directory with their container name
      # in this case:
      # ${{github.workspace}}/${{env.ARTIFACTS}}/
      uses: actions/download-artifact@v3

    # upload asset see [Yet Another Upload Release Asset Action](https://github.com/marketplace/actions/yet-another-upload-release-asset-action)
    - name: Automatic asset upload if pre-release
      uses: shogo82148/actions-upload-release-asset@v1
      if: ${{ steps.latest_release.outputs.prerelease }}
      with:
        # upload_url: ${{ github.event.release.upload_url }}
        # upload_url: ${{ steps.latest_release.outputs.upload_url }}
        upload_url: ${{ steps.latest_release.outputs.upload_url }}
        # asset_path: ${{github.workspace}}/build/*.deb
        asset_path: ${{github.workspace}}/${{env.ARTIFACTS}}/*

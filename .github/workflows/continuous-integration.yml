#
# Integration and deployment workflow
#
# This file is part of the 'OrthoDocs' (ODOX) project.
#
# Copyright Â© 2022, Giampiero Gabbiani (giampiero@gabbiani.org)
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

name: Integration and deployment

on:
  push:
    branches: [ "trunk" ]
  pull_request:
    branches: [ "trunk" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GITHUB_TOKEN: ${{ github.token }}
  ARTIFACTS: packages

jobs:
  ubuntu-integration:

#    if: false

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'
    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: Install project pre-requisites
      # install Ninja 'cause of the automatic build parallelism tuned with the
      # number of processors found in the hosting system
      run: |
        sudo apt update
        sudo apt upgrade -y
        sudo apt install -y default-jdk libboost-all-dev lintian ninja-build

    - name: CMake configuration
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -GNinja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DODOX_TESTS=ON

    - name: Build executables
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Performs tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Create platform dependent binary packages
      working-directory: ${{github.workspace}}/build
      run: cpack

    - name: Upload produced artifacts
      uses: actions/upload-artifact@v3
      id: upload-artifacts
      with:
        name: ${{env.ARTIFACTS}}
        path: ${{github.workspace}}/build/*.deb

  fedora-integration:

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'
    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: Docker build & run
      working-directory: ${{github.workspace}}/docker
      run: |
        mkdir ${{github.workspace}}/build
        docker build -t odox-fedora -f Dockerfile.fedora .
        docker run -t --volume $(realpath ${{github.workspace}}):/in --volume $(realpath ${{github.workspace}})/build:/out odox-fedora /in /out ${{env.BUILD_TYPE}}

    - name: Upload produced artifacts
      uses: actions/upload-artifact@v3
      id: upload-artifacts
      with:
        name: ${{env.ARTIFACTS}}
        path: ${{github.workspace}}/build/*.rpm

  macos-integration:

#    if: false

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'
    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: Install project pre-requisites
      # install Ninja 'cause of the automatic build parallelism tuned with the
      # number of processors found in the hosting system
      run: brew install boost ninja

    # antlr-4.12.0-complete.jar is compiled with a bytecode v55.
    # according to [Class File Versions](https://javaalmanac.io/bytecode/versions/)
    # this correspond to a java v11 that we require because the default provided
    # is java 8 (so bytecode v52)
    - name: Install correct Java version
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        check-latest: true

    - name: CMake configuration
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -GNinja -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DODOX_TESTS=ON

    - name: Build executables
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Performs tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Create platform dependent binary packages
      working-directory: ${{github.workspace}}/build
      run: cpack

    - name: Upload produced artifacts
      uses: actions/upload-artifact@v3
      id: upload-artifacts
      with:
        name: ${{env.ARTIFACTS}}
        path: ${{github.workspace}}/build/*.pkg

  windows-integration:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:

    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          base-devel
          # mingw-w64-x86_64-boost
          # mingw-w64-x86_64-cmake
          # mingw-w64-x86_64-ninja
          # mingw-w64-x86_64-toolchain
          # mingw-w64-x86_64-gcc
          # mingw-w64-x86_64-icu
          mingw-w64-x86_64-binutils
          mingw-w64-x86_64-boost
          mingw-w64-x86_64-brotli
          mingw-w64-x86_64-bzip2
          mingw-w64-x86_64-c-ares
          mingw-w64-x86_64-ca-certificates
          mingw-w64-x86_64-cli11
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-crt-git
          mingw-w64-x86_64-curl
          mingw-w64-x86_64-expat
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs
          mingw-w64-x86_64-gdb
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-gmp
          mingw-w64-x86_64-headers-git
          mingw-w64-x86_64-icu
          mingw-w64-x86_64-isl
          mingw-w64-x86_64-jansson
          mingw-w64-x86_64-jemalloc
          mingw-w64-x86_64-jsoncpp
          mingw-w64-x86_64-libarchive
          mingw-w64-x86_64-libb2
          mingw-w64-x86_64-libffi
          mingw-w64-x86_64-libiconv
          mingw-w64-x86_64-libidn2
          mingw-w64-x86_64-libpsl
          mingw-w64-x86_64-libssh2
          mingw-w64-x86_64-libsystre
          mingw-w64-x86_64-libtasn1
          mingw-w64-x86_64-libtre-git
          mingw-w64-x86_64-libunistring
          mingw-w64-x86_64-libuv
          mingw-w64-x86_64-libwinpthread-git
          mingw-w64-x86_64-libxml2
          mingw-w64-x86_64-lz4
          mingw-w64-x86_64-mpc
          mingw-w64-x86_64-mpdecimal
          mingw-w64-x86_64-mpfr
          mingw-w64-x86_64-ncurses
          mingw-w64-x86_64-nghttp2
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-nodejs
          mingw-w64-x86_64-openssl
          mingw-w64-x86_64-p11-kit
          mingw-w64-x86_64-pkgconf
          mingw-w64-x86_64-python
          mingw-w64-x86_64-readline
          mingw-w64-x86_64-rhash
          mingw-w64-x86_64-sqlite3
          mingw-w64-x86_64-tcl
          mingw-w64-x86_64-termcap
          mingw-w64-x86_64-tk
          mingw-w64-x86_64-tzdata
          mingw-w64-x86_64-windows-default-manifest
          mingw-w64-x86_64-winpthreads-git
          mingw-w64-x86_64-xxhash
          mingw-w64-x86_64-xz
          mingw-w64-x86_64-zlib
          mingw-w64-x86_64-zstd

    # antlr-4.12.0-complete.jar is compiled with a bytecode v55.
    # according to [Class File Versions](https://javaalmanac.io/bytecode/versions/)
    # this correspond to a java v11 that we require because the default provided
    # is java 8 (so bytecode v52)
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        check-latest: true

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'
    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: CMake configuration
      run: cmake -GNinja -B ${{github.workspace}}\build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DODOX_TESTS=ON -DBOOST_ROOT=D:/a/_temp/msys64/mingw64 -DICU_ROOT=D:/a/_temp/msys64/mingw64

    - name: Build
      run: cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}\build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        set MSYSTEM=MINGW64
        msys2 -c 'ctest -C ${{env.BUILD_TYPE}} -T test --output-on-failure'

    # creates binary package
    - name: Create package
      working-directory: ${{github.workspace}}\build
      run: cpack

    - name: Upload produced artifacts
      uses: actions/upload-artifact@v3
      id: upload-artifacts
      with:
        name: ${{env.ARTIFACTS}}
        path: ${{github.workspace}}\build\*.exe

  deployment:
    needs: [fedora-integration, macos-integration, ubuntu-integration, windows-integration]
    runs-on: ubuntu-latest

    steps:

    - name: Project checkout
      uses: actions/checkout@v3
      with:
        # Number of commits to fetch. 0 indicates all history for all branches and tags (default 1).
        fetch-depth: '0'

    - name: Get the latest tag in repo
      # result in steps.git_tag.outputs.tag
      id: git_tag
      uses: pavelsaman/git-nth-last-tag@v1

    - name: Get the release associated with the found tag
      id: latest_release
      uses: kaliber5/action-get-release@v1
      with:
        tag_name: ${{steps.git_tag.outputs.tag}}
        token: ${{ env.GITHUB_TOKEN }}
        # latest: true

    - name: Dump release info
      run: |
        echo "Tag name: ${{ steps.git_tag.outputs.tag }}"
        echo "Is pre-release: ${{ steps.latest_release.outputs.prerelease }}"

    - name: Download artifacts locally
      # setting no name will download all the produced artifacts in the
      # workspace after creating a directory with their container name
      # in this case:
      # ${{github.workspace}}/${{env.ARTIFACTS}}/
      uses: actions/download-artifact@v3

    # upload asset see [Yet Another Upload Release Asset Action](https://github.com/marketplace/actions/yet-another-upload-release-asset-action)
    - name: Automatic asset upload if pre-release
      # see also [If condition are always evaluated as true when containing expression syntax inside](https://github.com/actions/runner/issues/1173)
      if: steps.latest_release.outputs.prerelease == 'true'
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        # upload_url: ${{ github.event.release.upload_url }}
        # upload_url: ${{ steps.latest_release.outputs.upload_url }}
        upload_url: ${{ steps.latest_release.outputs.upload_url }}
        # asset_path: ${{github.workspace}}/build/*.deb
        asset_path: ${{github.workspace}}/${{env.ARTIFACTS}}/*
